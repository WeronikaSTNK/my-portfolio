import React, { Component, useState } from "react";
import emailjs from "emailjs-com";
import content from "./../../content";

export const ContactForm = props => {
  const {
    your_name,
    your_email,
    your_message,
    send_message,
    language
  } = props.content;

  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  const [errors, setErrors] = useState({errorsName: '', errorsEmail:"", errorsMessage:""});
  // const [errorName, seterrorName] = useState("");
  // const [errorEmail, setErrorEmail] = useState("");
  // const [errorMessage, setErrorMessage] = useState("");

  const [messageStatus, setMessageStatus] = useState("");

  const handleInputChange = e => {
    e.preventDefault();
    const target = e.target;
    const name = target.name;
    const value = target.value;
    setName({ [name]: value });
    console.log(value);
  };

  const validateMail = () => {
    let errors = {};
    let formIsValid = true;
    const lang = props.language;

    if (!name || name.length < 3 || name.length > 25) {
      errors.name =
        lang === "pl"
          ? "Imię musi zawierać od 3 do 25 znaków"
          : "Your name should be between 3 and 25 characters long";
      formIsValid = false;
    }
    if (!message || message.length < 10 || message.length > 1000) {
      errors.message =
        lang === "pl"
          ? "Wiadomość musi zawierać od 10 do 1000 znaków"
          : "Your message should consist between 10 and 1000 characters";
      formIsValid = false;
    }
    if (email || email.length < 3) {
      errors.email =
        lang === "pl"
          ? "Adres email powinien składać się conajmniej z 3 znaków "
          : "Use minimum 3 symbols";
      formIsValid = false;
    }
    //regexp email
    let pattern = /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/;

    if (!pattern.test(email)) {
      errors.email =
        lang === "pl"
          ? "Wpisz poprawny adres email"
          : "Enter a valid email address";
      formIsValid = false;
    }
    setErrors(errors);
    return formIsValid;
  };

  const clearForm = () => {
    setName("");
    setEmail("");
    setMessage("");
  };

  const sentMessage = e => {
    e.preventDefault();
    if (!validateMail()) {
      return;
    }

    const templateParams = {
      name: name, //state
      email: email,
      message: message,
      auto_reply:
        language === "pl"
          ? "Dziękuję za wiadomość"
          : "Thank you for your message"
    };

    const successMessage =
      language === "pl"
        ? "Wiadomość została wysłana"
        : "Message send successful";

    const failMessage =
      language === "pl"
        ? "Wysyłanie wiadomości nie powiodło się"
        : "Failed to send the message";

    const sendingSuccessfully = () => {
      setMessageStatus(successMessage);
      setTimeout(() => {
        setMessageStatus({ messageStatus: false });
      }, 3000);
    };

    const sendingFailed = () => {
      setMessage(failMessage);
      setTimeout(() => {
        setMessageStatus({ messageStatus: false });
      }, 3000);
    };

    const template_id = "template_igc4o3aJ";

    emailjs.send("gmail", "contact_form", templateParams, template_id).then(
      function(res) {
        sendingSuccessfully();
        console.log(successMessage, res.status, res.text);
      },
      function(err) {
        sendingFailed();
        console.log(err);
      }
    );
    setTimeout(clearForm, 3000);
  };

  return (
    <>
    <form className="contactForm">
      <label htmlFor="name">{your_name}:</label>
      <input
        type="text"
        className="name"
        name="name"
        id="name"
        placeholder={your_name}
        required
        onChange={handleInputChange}
        value={name}
        error={errors.name}
      />
      {/* {errors.name ? <span className="error"> {errors.name}</span> : ""} */}

      <label htmlFor="email">{your_email}:</label>
      <input
        type="email"
        className="email"
        name="email"
        id="email"
        placeholder={your_email}
        required
        onChange={handleInputChange}
        value={email}
      />
      {errors.email ? <span className="error"> {errors.email}</span> : ""}

      <label htmlFor="message">{your_message}:</label>
      <textarea
        className="message"
        name="message"
        id="message"
        cols="30"
        rows="10"
        placeholder={your_message}
        required
        onChange={handleInputChange}
        value={message}
      ></textarea>
      {errors.message ? <span className="error"> {errors.message}</span> : ""}

      <button className="formButton" type="submit" onClick={sentMessage}>
        {send_message}
      </button>
      {messageStatus ? { messageStatus } : ""}
    </form>
    </>
  );
};

export default ContactForm;
